{"mappings":"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","sources":["src/js/util/util.js","src/js/util/dom-events.js","src/js/util/viewport-size.js","src/js/slide/pan-bounds.js","src/js/slide/zoom-level.js","src/js/slide/slide.js","src/js/gestures/drag-handler.js","src/js/gestures/zoom-handler.js","src/js/gestures/tap-handler.js","src/js/gestures/gestures.js","src/js/main-scroll.js","src/js/util/spring-animation.js","src/js/keyboard.js","src/js/util/css-animation.js","src/js/util/spring-easer.js","src/js/util/animations.js","src/js/scroll-wheel.js","src/js/ui/ui-element.js","src/js/ui/button-arrow.js","src/js/ui/button-close.js","src/js/ui/button-zoom.js","src/js/ui/loading-indicator.js","src/js/ui/counter-indicator.js","src/js/ui/ui.js","src/js/slide/get-thumb-bounds.js","src/js/core/eventable.js","src/js/slide/placeholder.js","src/js/slide/content.js","src/js/slide/loader.js","src/js/opener.js","src/js/photoswipe.js","node_modules/@swc/helpers/lib/_object_spread.js","node_modules/@swc/helpers/lib/_define_property.js","node_modules/@swc/helpers/lib/_to_consumable_array.js","node_modules/@swc/helpers/lib/_array_without_holes.js","node_modules/@swc/helpers/lib/_array_like_to_array.js","node_modules/@swc/helpers/lib/_iterable_to_array.js","node_modules/@swc/helpers/lib/_non_iterable_spread.js","node_modules/@swc/helpers/lib/_unsupported_iterable_to_array.js"],"sourcesContent":["/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {undefined | null | false | '' | 0} Falsy */\r\n/** @typedef {keyof HTMLElementTagNameMap} HTMLElementTagName */\r\n\r\n/**\r\n * @template {HTMLElementTagName | Falsy} [T=\"div\"]\r\n * @template {Node | undefined} [NodeToAppendElementTo=undefined]\r\n * @param {string=} className\r\n * @param {T=} [tagName]\r\n * @param {NodeToAppendElementTo=} appendToEl\r\n * @returns {T extends HTMLElementTagName ? HTMLElementTagNameMap[T] : HTMLElementTagNameMap['div']}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  // @ts-expect-error\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are qual\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string=} prop CSS property to animate\r\n * @param {number=} duration in ms\r\n * @param {string=} ease CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? (prop + ' ' + duration + 'ms ' + (ease || defaultCSSEasing))\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode();\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n */\r\nexport function specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {HTMLElement | NodeListOf<HTMLElement> | string} option\r\n * @param {string=} legacySelector\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\r\n\r\n","// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document} target\r\n * @prop {string} type\r\n * @prop {(e: any) => void} listener\r\n * @prop {boolean} passive\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type Can be multiple, separated by space.\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean} passive\r\n   * @param {boolean=} unbind Whether the event should be added or removed\r\n   * @param {boolean=} skipPool Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default DOMEvents;\r\n","/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipe} pswp\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {{ x?: number; y?: number }} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  /** @type {number} */\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {{ x?: number; y?: number }} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n","import {\r\n  clamp\r\n} from '../util/util.js';\r\nimport { parsePaddingOption } from '../util/viewport-size.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n\r\n    this.currZoomLevel = 1;\r\n\r\n    /** @type {Point} */\r\n    this.center = {};\r\n    /** @type {Point} */\r\n    this.max = {};\r\n    /** @type {Point} */\r\n    this.min = {};\r\n\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By defaul it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\r\n\r\nexport default PanBounds;\r\n","const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe=} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {{ x?: number; y?: number }} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // eslint-disable-next-line max-len\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (optionPrefix + 'ZoomLevel');\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n","/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @typedef {_SlideData & Record<string, any>} SlideData\r\n * @typedef {Object} _SlideData\r\n * @prop {HTMLElement=} element thumbnail element\r\n * @prop {string=} src image URL\r\n * @prop {string=} srcset image srcset\r\n * @prop {number=} w image width (deprecated)\r\n * @prop {number=} h image height (deprecated)\r\n * @prop {number=} width image width\r\n * @prop {number=} height image height\r\n * @prop {string=} msrc placeholder image URL that's displayed before large image is loaded\r\n * @prop {string=} alt image alt text\r\n * @prop {boolean=} thumbCropped whether thumbnail is cropped client-side or not\r\n * @prop {string=} html html content of a slide\r\n * @prop {'image' | 'html' | string} [type] slide type\r\n */\r\n\r\nimport {\r\n  createElement,\r\n  setTransform,\r\n  equalizePoints,\r\n  roundPoint,\r\n  toTransformString,\r\n  clamp,\r\n} from '../util/util.js';\r\n\r\nimport PanBounds from './pan-bounds.js';\r\nimport ZoomLevel from './zoom-level.js';\r\nimport { getPanAreaSize } from '../util/viewport-size.js';\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = {};\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.pan = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap');\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.load();\r\n    this.updateContentSize();\r\n    this.appendHeavy();\r\n\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load();\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\r\n      // allow filtering\r\n      this.calculateSize();\r\n    }\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.container.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean=} force if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getPlaceholderElement() {\r\n    if (this.content.placeholder) {\r\n      return this.content.placeholder.element;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {{ x?: number; y?: number }} centerPoint\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean=} ignoreBounds Minimum and maximum zoom levels will be ignored.\r\n   * @return {boolean=} Returns true if animated.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {{ x?: number, y?: number }} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {{ x?: number; y?: number }} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number=} prevZoomLevel Zoom level before new zoom was applied.\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   */\r\n  isPannable() {\r\n    return this.width && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.width && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\r\n\r\nexport default Slide;\r\n","import {\r\n  equalizePoints, roundPoint, clamp\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = {};\r\n  }\r\n\r\n  start() {\r\n    equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && pswp.options.closeOnVerticalDrag\r\n        && currSlide.currZoomLevel <= currSlide.zoomLevels.fit\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        roundPoint(currSlide.pan);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { pswp, velocity } = this.gestures;\r\n    const { mainScroll } = pswp;\r\n    let indexDiff = 0;\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is vicible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if (pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.max\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    const { velocity } = this.gestures;\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Inceasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, pswp, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta) {\r\n      return;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n  }\r\n  //\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - this.pswp.currSlide.bounds.center.y)\r\n            / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number=} customFriction (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { pan, bounds } = this.pswp.currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DragHandler;\r\n","import {\r\n  equalizePoints, getDistanceBetween, clamp, pointsEqual\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = this.gestures.pswp;\r\n    /** @type {Point} */\r\n    this._startPan = {};\r\n\r\n    /** @type {Point} */\r\n    this._startZoomPoint = {};\r\n    /** @type {Point} */\r\n    this._zoomPoint = {};\r\n  }\r\n\r\n  start() {\r\n    this._startZoomLevel = this.pswp.currSlide.currZoomLevel;\r\n    equalizePoints(this._startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    if (currSlide.currZoomLevel < currSlide.zoomLevels.initial\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean=} ignoreGesture\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === undefined) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({}, currSlide.pan);\r\n    let destinationPan = equalizePoints({}, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    let panNeedsChange = true;\r\n    if (pointsEqual(destinationPan, initialPan)) {\r\n      panNeedsChange = false;\r\n    }\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default ZoomHandler;\r\n","/**\r\n * @template T\r\n * @template P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TapHandler;\r\n","import {\r\n  equalizePoints, pointsEqual, getDistanceBetween\r\n} from '../util/util.js';\r\n\r\nimport DragHandler from './drag-handler.js';\r\nimport ZoomHandler from './zoom-handler.js';\r\nimport TapHandler from './tap-handler.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y'} */\r\n    this.dragAxis = undefined;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = {}; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = {}; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = {};\r\n    /** @type {Point} */\r\n    this.prevP2 = {};\r\n    /** @type {Point} */\r\n    this.startP1 = {};\r\n    /** @type {Point} */\r\n    this.startP2 = {};\r\n    /** @type {Point} */\r\n    this.velocity = {};\r\n\r\n    /** @type {Point} */\r\n    this._lastStartP1 = {};\r\n    /** @type {Point} */\r\n    this._intervalP1 = {};\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]} */\r\n    this._ongoingPointers = [];\r\n\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(pswp.scrollWrap, 'click', e => this._onClick(e));\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        pswp.scrollWrap.ontouchmove = () => {}; // eslint-disable-line\r\n        pswp.scrollWrap.ontouchend = () => {}; // eslint-disable-line\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(pswp.scrollWrap, pref + down, this.onPointerDown.bind(this));\r\n    events.add(window, pref + 'move', this.onPointerMove.bind(this));\r\n    events.add(window, pref + up, this.onPointerUp.bind(this));\r\n    if (cancelEvent) {\r\n      events.add(pswp.scrollWrap, cancelEvent, this.onPointerUp.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    let isMousePointer;\r\n    if (e.type === 'mousedown' || e.pointerType === 'mouse') {\r\n      isMousePointer = true;\r\n    }\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    this.pointerDown = true;\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this.pointerDown = false;\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @param {boolean=} force\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPoiner) => {\r\n        return ongoingPoiner.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {}));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // update points that were used during previous rAF tick\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  // update points at the start of gesture\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gestures;\r\n","import {\r\n  setTransform,\r\n  createElement,\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n\r\n    /** @type {number} */\r\n    this.slideWidth = undefined;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = undefined;\r\n\r\n    this.resetPosition();\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean=} resizeSlides Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', false, this.pswp.container);\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean=} animate\r\n   * @param {number=} velocityX\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    if (diff) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n        this._containerShiftIndex++;\r\n\r\n        setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n        this._containerShiftIndex--;\r\n\r\n        setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1].slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    pswp.currSlide.applyCurrentZoomPan();\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean=} dragging\r\n   */\r\n  moveTo(x, dragging) {\r\n    /** @type {number} */\r\n    let newSlideIndexOffset;\r\n    /** @type {number} */\r\n    let delta;\r\n\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n    setTransform(this.pswp.container, x);\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging });\r\n  }\r\n}\r\n\r\nexport default MainScroll;\r\n","import SpringEaser from './spring-easer.js';\r\n\r\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish,\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = null;\r\n  }\r\n}\r\n\r\nexport default SpringAnimation;\r\n","import { specialKeyUsed } from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Heps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', this._onFocusIn.bind(this));\r\n      pswp.events.add(document, 'keydown', this._onKeyDown.bind(this));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  _focusRoot() {\r\n    if (!this._wasFocused) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe>} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y'} */\r\n    let axis;\r\n    let isForward;\r\n\r\n    switch (e.keyCode) {\r\n      case 27: // esc\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case 90: // z key\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case 37: // left\r\n        axis = 'x';\r\n        break;\r\n      case 38: // top\r\n        axis = 'y';\r\n        break;\r\n      case 39: // right\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case 40: // bottom\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case 9: // tab\r\n        this._focusRoot();\r\n        break;\r\n      default:\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Keyboard;\r\n","import { setTransitionStyle, removeTransitionStyle } from './util.js';\r\n\r\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish\r\n      // opacity\r\n    } = props;\r\n\r\n    let {\r\n      duration,\r\n      easing,\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop];\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n\r\n    duration = duration || 333;\r\n    easing = easing || DEFAULT_EASING;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transiton won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._helperTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._helperTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n\r\n        // Safari occasionally does not emit transitionend event\r\n        // if element propery was modified during the transition,\r\n        // which may be caused by resize or third party component,\r\n        // using timeout as a safety fallback\r\n        this._helperTimeout = setTimeout(() => {\r\n          this._finalizeAnimation();\r\n        }, duration + 500);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._helperTimeout) {\r\n      clearTimeout(this._helperTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default CSSAnimation;\r\n","const DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} dampingRatio\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} naturalFrequency\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency = this._naturalFrequency\r\n                         * Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\r\n\r\nexport default SpringEaser;\r\n","import CSSAnimation from './css-animation.js';\r\nimport SpringAnimation from './spring-animation.js';\r\n\r\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n\r\n/**\r\n * @typedef {Object} AnimationProps\r\n *\r\n * @prop {HTMLElement=} target\r\n *\r\n * @prop {string=} name\r\n *\r\n * @prop {number=} start\r\n * @prop {number=} end\r\n * @prop {number=} duration\r\n * @prop {number=} velocity\r\n * @prop {number=} dampingRatio\r\n * @prop {number=} naturalFrequency\r\n *\r\n * @prop {(end: number) => void} [onUpdate]\r\n * @prop {() => void} [onComplete]\r\n * @prop {() => void} [onFinish]\r\n *\r\n * @prop {string=} transform\r\n * @prop {string=} opacity\r\n * @prop {string=} easing\r\n *\r\n * @prop {boolean=} isPan\r\n * @prop {boolean=} isMainScroll\r\n */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   * @param {boolean=} isSpring\r\n   */\r\n  _start(props, isSpring) {\r\n    /** @type {Animation} */\r\n    let animation;\r\n    if (isSpring) {\r\n      animation = new SpringAnimation(props);\r\n    } else {\r\n      animation = new CSSAnimation(props);\r\n    }\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Animations;\r\n","/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', this._onWheel.bind(this));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScrollWheel;\r\n","import { createElement } from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean=} isCustomSVG\r\n * @prop {string} inner\r\n * @prop {string=} outlineID\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string=} className\r\n * @prop {UIElementMarkup=} html\r\n * @prop {boolean=} isButton\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string=} title\r\n * @prop {string=} ariaLabel\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number=} order\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    /** @type {HTMLElement} */\r\n    let element;\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      // create button element\r\n      element = createElement(className, tagName);\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      if (ariaLabel || title) {\r\n        /** @type {HTMLElement} */ (element).setAttribute('aria-label', ariaLabel || title);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          pswp[data.onClick]();\r\n        } else {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    let container;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      } else {\r\n        // root element\r\n        container = pswp.element;\r\n      }\r\n    }\r\n\r\n    container.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\r\n\r\nexport default UIElement;\r\n","/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean=} isNextButton\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\r\n\r\nexport default closeButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\r\n\r\nexport default zoomButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout} */\r\n    let delayTimeout;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList[add ? 'add' : 'remove']('pswp__preloader--' + className);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(pswp.currSlide.content.isLoading());\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\r\n","import UIElement from './ui-element.js';\r\nimport { arrowPrev, arrowNext } from './button-arrow.js';\r\nimport closeButton from './button-close.js';\r\nimport zoomButton from './button-zoom.js';\r\nimport { loadingIndicator } from './loading-indicator.js';\r\nimport { counterIndicator } from './counter-indicator.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList[isZoomedIn ? 'add' : 'remove']('pswp--zoomed-in');\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = undefined;\r\n\r\n    /** @type {number} */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element.classList[pswp.getNumItems() === 1 ? 'add' : 'remove']('pswp--one-slide');\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    if (this.pswp.opener.isClosing) {\r\n      return;\r\n    }\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n\r\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial\r\n      ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\r\n\r\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\r\n\r\nexport default UI;\r\n","/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nexport function getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  let thumbBounds;\r\n  /** @type {HTMLElement} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : element.querySelector(thumbSelector);\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w,\r\n        itemData.height || itemData.h\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\r\n","/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point, transitionDuration: number | false }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter<T>\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback<T>\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe=} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        // @ts-expect-error\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n","import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).decoding = 'async';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).alt = '';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hiden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","import { createElement, isSafari, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipe} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement} */\r\n    this.element = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean=} isLazy\r\n   * @param {boolean=} reload\r\n   */\r\n  load(isLazy, reload) {\r\n    if (!this.placeholder && this.slide && this.usePlaceholder()) {\r\n      // use   -based placeholder only for the first slide,\r\n      // as rendering (even small stretched thumbnail) is an expensive operation\r\n      const placeholderSrc = this.instance.applyFilters(\r\n        'placeholderSrc',\r\n        (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n        this\r\n      );\r\n      this.placeholder = new Placeholder(\r\n        placeholderSrc,\r\n        this.slide.container\r\n      );\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src;\r\n\r\n    imageElement.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    // eslint-disable-next-line max-len\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        // eslint-disable-next-line max-len\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (this.data.srcset) {\r\n      const image = /** @type HTMLImageElement */ (this.element);\r\n      const sizesWidth = this.instance.applyFilters(\r\n        'srcsetSizesWidth',\r\n        this.displayedImageWidth,\r\n        this\r\n      );\r\n\r\n      if (!image.dataset.largestUsedSize\r\n          || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\r\n        image.sizes = sizesWidth + 'px';\r\n        image.dataset.largestUsedSize = String(sizesWidth);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      /** @type {HTMLElement} */\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipe | PhotoSwipeLightbox | PhotoSwipeBase} instance PhotoSwipe instance\r\n * @param {number} index\r\n * @returns Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData, index);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  // @ts-expect-error should provide pswp instance?\r\n  const viewportSize = instance.viewportSize || getViewportSize(options, instance);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number=} diff Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  loadSlideByIndex(index) {\r\n    index = this.pswp.getLoopedIndex(index);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n\r\n    if (content) {\r\n      // assign slide to content\r\n      content.setSlide(slide);\r\n    }\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = null;\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import {\r\n  setTransform,\r\n  equalizePoints,\r\n  decodeImage,\r\n  toTransformString\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    /** @type {false | Bounds} */\r\n    this._thumbBounds = undefined;\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return false;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n\r\n    return true;\r\n  }\r\n\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = false;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = false;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = (this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && (slide.content && slide.content.usePlaceholder())\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide.holderElement;\r\n\r\n      pswp.container.style.overflow = 'hidden';\r\n      pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.element.style.opacity = '1';\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve();\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve();\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  _initiate() {\r\n    this.pswp.element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element.classList[this.isOpening ? 'add' : 'remove']('pswp--ui-visible');\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      pswp.currSlide.zoomAndPanToInitial();\r\n      this._animateTo(\r\n        pswp.currSlide.container,\r\n        'transform',\r\n        pswp.currSlide.getCurrentTransform()\r\n      );\r\n    }\r\n\r\n    if (this._animateBgOpacity) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    if (this._animateBgOpacity\r\n        && pswp.bgOpacity > 0.01) { // do not animate opacity if it's already at 0\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {boolean=} animate\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n    currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n\r\n    if (animate) {\r\n      this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n    } else {\r\n      currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\r\n\r\nexport default Opener;\r\n","import {\r\n  createElement,\r\n  equalizePoints,\r\n  pointsEqual,\r\n  clamp,\r\n} from './util/util.js';\r\n\r\nimport DOMEvents from './util/dom-events.js';\r\nimport Slide from './slide/slide.js';\r\nimport Gestures from './gestures/gestures.js';\r\nimport MainScroll from './main-scroll.js';\r\n\r\nimport Keyboard from './keyboard.js';\r\nimport Animations from './util/animations.js';\r\nimport ScrollWheel from './scroll-wheel.js';\r\nimport UI from './ui/ui.js';\r\nimport { getViewportSize } from './util/viewport-size.js';\r\nimport { getThumbBounds } from './slide/get-thumb-bounds.js';\r\nimport PhotoSwipeBase from './core/base.js';\r\nimport Opener from './opener.js';\r\nimport ContentLoader from './slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x?: number; y?: number; id?: string | number }} Point */\r\n/** @typedef {{ x?: number; y?: number }} Size */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeOptions https://photoswipe.com/options/\r\n *\r\n * @prop {DataSource=} dataSource\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number=} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number=} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean=} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean=} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean=} wheelToZoom\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean=} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean=} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding=} padding\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Size, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} [hideAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [showAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [zoomAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string=} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean=} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean=} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean=} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean=} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} [imageClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [bgClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [tapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [doubleTapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number=} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string=} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipe) => { x: number; y: number }} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string=} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]=} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string=} mainClass\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement=} appendToEl\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number=} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string=} closeTitle\r\n * Translating\r\n *\r\n * @prop {string=} zoomTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowNextTitle\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number=} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean=} arrowPrev\r\n * @prop {boolean=} arrowNext\r\n * @prop {boolean=} zoom\r\n * @prop {boolean=} close\r\n * @prop {boolean=} counter\r\n *\r\n * @prop {string=} arrowPrevSVG\r\n * @prop {string=} arrowNextSVG\r\n * @prop {string=} zoomSVG\r\n * @prop {string=} closeSVG\r\n * @prop {string=} counterSVG\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * @prop {string=} arrowNextTitle\r\n * @prop {string=} zoomTitle\r\n * @prop {string=} closeTitle\r\n * @prop {string=} counterTitle\r\n *\r\n * @prop {ZoomLevelOption=} initialZoomLevel\r\n * @prop {ZoomLevelOption=} secondaryZoomLevel\r\n * @prop {ZoomLevelOption=} maxZoomLevel\r\n *\r\n * @prop {boolean=} mouseMovePan\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean=} showHideOpacity\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean=} preloadFirstSlide\r\n * @prop {string=} gallery\r\n * @prop {string=} gallerySelector\r\n * @prop {string=} children\r\n * @prop {string=} childSelector\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this._prepareOptions(options);\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.offset = {};\r\n\r\n    /**\r\n     * @type {{ x?: number; y?: number }}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = {};\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.viewportSize = {};\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     *\r\n     * @type {number}\r\n     */\r\n    this.bgOpacity = 1;\r\n\r\n    /** @type {HTMLDivElement} */\r\n    this.topBar = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n\r\n    /** @type {Animations} */\r\n    this.animations = new Animations();\r\n\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    this.element.className += ' ' + rootClasses;\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      this.mainScroll.itemHolders[0].el.style.display = 'block';\r\n      this.mainScroll.itemHolders[2].el.style.display = 'block';\r\n\r\n      // Add content to the previous and next slide\r\n      this.setContent(this.mainScroll.itemHolders[0], this.currIndex - 1);\r\n      this.setContent(this.mainScroll.itemHolders[2], this.currIndex + 1);\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    index = clamp(index, 0, numSlides - 1);\r\n\r\n    return index;\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.appendHeavy();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this.listeners = null;\r\n\r\n    this.scrollWrap.ontouchmove = null;\r\n    this.scrollWrap.ontouchend = null;\r\n\r\n    this.element.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.destroy();\r\n      }\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = this.currSlide.index - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          /** @type {Slide} */\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean=} force If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = null;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean=} force Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', false, this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', false, this.element);\r\n    this.container = createElement('pswp__container', false, this.scrollWrap);\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continious loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   * @private\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PhotoSwipeOptions}*/\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\r\n\r\nexport default PhotoSwipe;\r\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _objectSpread;\nvar _defineProperty = _interopRequireDefault(require(\"./_define_property\"));\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === 'function') {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            (0, _defineProperty).default(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _defineProperty;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _toConsumableArray;\nvar _arrayWithoutHoles = _interopRequireDefault(require(\"./_array_without_holes\"));\nvar _iterableToArray = _interopRequireDefault(require(\"./_iterable_to_array\"));\nvar _nonIterableSpread = _interopRequireDefault(require(\"./_non_iterable_spread\"));\nvar _unsupportedIterableToArray = _interopRequireDefault(require(\"./_unsupported_iterable_to_array\"));\nfunction _toConsumableArray(arr) {\n    return (0, _arrayWithoutHoles).default(arr) || (0, _iterableToArray).default(arr) || (0, _unsupportedIterableToArray).default(arr) || (0, _nonIterableSpread).default();\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _arrayWithoutHoles;\nvar _arrayLikeToArray = _interopRequireDefault(require(\"./_array_like_to_array\"));\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return (0, _arrayLikeToArray).default(arr);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _arrayLikeToArray;\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _iterableToArray;\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _nonIterableSpread;\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _unsupportedIterableToArray;\nvar _arrayLikeToArray = _interopRequireDefault(require(\"./_array_like_to_array\"));\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, _arrayLikeToArray).default(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, _arrayLikeToArray).default(o, minLen);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n"],"names":["$ds8z5","parcelRequire","$e2c227dece50217e$var$createElement","className","tagName","appendToEl","el","document","createElement","appendChild","$e2c227dece50217e$var$equalizePoints","p1","p2","x","y","undefined","id","$e2c227dece50217e$var$roundPoint","p","Math","round","$e2c227dece50217e$var$getDistanceBetween","abs","sqrt","$e2c227dece50217e$var$pointsEqual","$e2c227dece50217e$var$clamp","val","min","max","$e2c227dece50217e$var$toTransformString","scale","propValue","$e2c227dece50217e$var$setTransform","transform","$e2c227dece50217e$var$setTransitionStyle","prop","duration","ease","transition","width","w","$e2c227dece50217e$var$LOAD_STATE","$e2c227dece50217e$var$supportsPassive","addEventListener","Object","defineProperty","get","e","$e2c227dece50217e$var$DOMEvents","DOMEvents","$parcel$interopDefault","$8MBJY","this","_pool","$a2hTj","target","type","listener","passive","_toggleListener","_this","methodName","unbind","split","forEach","eType","skipPool","filter","poolItem","push","eventOptions","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","$e2c227dece50217e$var$parsePaddingOption","viewportSize","itemData","index","padding","paddingValue","toUpperCase","slice","legacyPropName","$e2c227dece50217e$var$getPanAreaSize","$e2c227dece50217e$var$PanBounds","PanBounds","slide","currZoomLevel","center","reset","value","axis","elSize","data","panAreaSize","panOffset","ZoomLevel","maxWidth","maxHeight","elementSize","hRatio","vRatio","vFill","initial","_getInitial","secondary","_getSecondary","_getMax","fit","dispatch","zoomLevels","optionPrefix","optionName","optionValue","fill","Number","_parseZoomLevelOption","Slide","currIndex","isActive","opener","isOpen","$e2c227dece50217e$var$ZoomLevel","contentLoader","getContentBySlide","container","height","content","activate","deactivate","holderElement","calculateSize","load","zoomAndPanToInitial","applyCurrentZoomPan","heavyAppended","mainScroll","isShifted","defaultPrevented","appendHeavy","key","currentResolution","hasSlide","remove","panTo","pan","updateContentSize","force","scaleMultiplier","sizeChanged","setDisplayedSize","prevDisplayedWidth","prevDisplayedHeight","placeholder","element","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","setZoomLevel","calculateZoomToPanOffset","prevZoomLevel","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","zoomAnimationDuration","bounds","update","point","getViewportCenterPoint","correctPan","zoomFactor","panX","panY","_applyZoomTransform","currSlide","zoom","newResolution","DragHandler","gestures","startPan","stopAll","_gestures","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","_panOrMoveMainScroll","velocity","indexDiff","currentSlideVisibilityRatio","getCurrSlideX","moveIndexBy","correctZoomPan","panPos","restoreBgOpacity","initialVelocity","decelerationRate","$e2c227dece50217e$var$project","vDragRatio","projectedVDragRatio","close","correctedPanPosition","projectedPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","start","end","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","moveTo","newPan","allowPanToNext","currSlideMainScrollX","mainScrollShiftDiff","isLeftToRight","isRightToLeft","potentialPan","customFriction","_currSlide","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","startP1","startP2","_startZoomLevel","_wasOverFitZoomLevel","minZoomLevel","pinchToClose","maxZoomLevel","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","destinationPan","initialPan","panNeedsChange","naturalFrequency","now","newZoomLevel","$e2c227dece50217e$var$didTapOnMainContent","event","closest","TapHandler","originalEvent","targetClassList","classList","contains","isBackgroundClick","_doClickOrTapAction","actionName","actionFullName","toggleZoom","clickToCloseNonZoomable","toggle","Gestures","prevP2","_intervalP1","_ongoingPointers","_touchEventEnabled","window","_pointerEventEnabled","PointerEvent","supportsTouch","navigator","maxTouchPoints","tapHandler","$e2c227dece50217e$var$TapHandler","events","add","scrollWrap","e1","_this1","_onClick","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","bind","onPointerMove","onPointerUp","e2","isMousePointer","pointerType","button","mouseDetected","_preventPointerEventBehaviour","_updatePoints","pointerDown","_numActivePoints","_clearTapTimer","preventDefault","e3","isDragging","isZooming","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","_velocityCalculated","_updateVelocity","drag","e4","_finishDrag","_finishTap","change","_updatePrevPoints","raf","requestAnimationFrame","_getVelocity","_intervalTime","time","e5","indexOf","tapDelay","doubleTapAction","_tapTimer","_lastStartP1","doubleTap","setTimeout","tap","click","displacement","cancelAnimationFrame","e6","e7","pointerEvent","pointerIndex","findIndex","ongoingPoiner","pointerId","splice","_convertEventPosToPoint","length","touchEvent","touches","diff","axisToCheck","e8","pageX","offset","pageY","identifier","e9","stopPropagation","$e2c227dece50217e$var$MainScroll","MainScroll","slideWidth","itemHolders","newSlideWidth","spacing","slideWidthChanged","itemHolder","resizeSlides","resize","_prevPositionIndex","i","getNumItems","animate","velocityX","newIndex","potentialIndex","canLoop","getLoopedIndex","distance","numSlides","_currPositionIndex","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","positionDifference","tempHolder","diffAbs","_containerShiftIndex","i1","shift","setContent","resetPosition","setIsActive","updateLazy","dragging","newSlideIndexOffset","$e2c227dece50217e$var$Keyboard","Keyboard","on","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","activeElement","returnFocus","_wasFocused","focus","e10","ctrlKey","metaKey","altKey","shiftKey","$e2c227dece50217e$var$specialKeyUsed","keydownAction","isForward","keyCode","escKey","arrowKeys","e11","template","$e2c227dece50217e$var$CSSAnimation","CSSAnimation","props","_this3","onFinish","_target","_onComplete","_onTransitionEnd","_this2","_helperTimeout","_finalizeAnimation","style","e12","_finished","clearTimeout","removeEventListener","SpringEaser","_naturalFrequency","_dampingRatio","_dampedFrequency","deltaPosition","deltaTime","coeff","naturalDumpingPow","pow","E","dumpedFCos","cos","dumpedFSin","sin","$e2c227dece50217e$var$SpringAnimation","SpringAnimation","easer","$e2c227dece50217e$var$SpringEaser","prevTime","Date","animationLoop","_raf","easeFrame","Animations","_start","animation","isSpring","activeAnimations","stop","destroy","some","$e2c227dece50217e$var$ScrollWheel","ScrollWheel","_onWheel","e13","deltaX","deltaY","wheelToZoom","deltaMode","zoomTo","clientX","clientY","isPannable","UIElement","isButton","toLowerCase","title","ariaLabel","setAttribute","htmlData","isCustomSVG","join","svgData","size","out","outlineID","onClick","onclick","e14","appendTo","topBar","applyFilters","loop","disabled","isNextButton","$e2c227dece50217e$var$arrowPrev","$e2c227dece50217e$var$arrowNext","$e2c227dece50217e$var$zoomButton","$e2c227dece50217e$var$loadingIndicator","indicatorElement","isVisible","delayTimeout","visible","isLoading","preloaderDelay","updatePreloaderVisibility","e15","$e2c227dece50217e$var$counterIndicator","innerText","indexIndicatorSep","isZoomedIn","UI","_lastUpdatedZoomLevel","$e2c227dece50217e$var$closeButton","uiElementsData","sort","a","b","items","isRegistered","uiElementData","registerElement","_onZoomPanUpdate","elementData","$e2c227dece50217e$var$UIElement","_pswp","isClosing","currZoomLevelDiff","$e2c227dece50217e$var$setZoomedIn","imageClickAction","details","PhotoSwipeEvent","assign","Eventable","fn","arguments","_filters","priority","f1","f2","addFilter","removeFilter","_len","args","Array","_key","apply","_listeners","off","$e2c227dece50217e$var$PhotoSwipeEvent","call","imageSrc","Placeholder","decoding","alt","src","$e2c227dece50217e$var$setWidthHeight","transformOrigin","parentNode","$e2c227dece50217e$var$Content","instance","Content","displayedImageWidth","h","state","isLazy","reload","usePlaceholder","placeholderSrc","msrc","isFirstSlide","$e2c227dece50217e$var$Placeholder","isImageContent","loadImage","imageElement","updateSrcsetSizes","srcset","onLoaded","onerror","onError","append","removePlaceholder","displayError","isError","isInitialSizeUpdate","displayedImageHeight","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","onload","errorMsgEl","errorMsg","isAttached","supportsDecode","$e2c227dece50217e$var$isSafari","isDecoding","decode","finally","appendImage","option","legacySelector","elements","NodeList","isArray","from","parent","querySelectorAll","selector","img","Promise","resolve","thumbnail","thumbSelector","matches","querySelector","thumbBounds","imageWidth","imageHeight","getBoundingClientRect","thumbAreaRect","fillZoomLevel","left","offsetX","top","offsetY","$e2c227dece50217e$var$getCroppedBoundsByElement","module","exports","default","source","ownKeys","keys","getOwnPropertySymbols","concat","sym","getOwnPropertyDescriptor","enumerable","$9eddae5a012cde57$var$_defineProperty","obj","__esModule","configurable","writable","arr","$6195f07b5409ba15$var$_arrayWithoutHoles","$6195f07b5409ba15$var$_iterableToArray","$6195f07b5409ba15$var$_unsupportedIterableToArray","$6195f07b5409ba15$var$_nonIterableSpread","$6195f07b5409ba15$var$_interopRequireDefault","$f215c72f040a88cf$var$_arrayLikeToArray","len","arr2","iter","Symbol","iterator","TypeError","o","minLen","$7a2c4c4c44c69707$var$_arrayLikeToArray","n","prototype","toString","constructor","test"],"version":3,"file":"photoswipe.esm.9c9c65c4.js.map"}